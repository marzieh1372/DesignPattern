Remote proxy:
They are responsible for representing the object located remotely.
Talking to the real object might involve marshalling and unmarshalling of data and talking to the remote object.
 All that logic is encapsulated in these proxies and the client application need not worry about them.

 Local execution of a remote service (remote proxy). This is when the service object is located
 on a remote server.
 In this case, the proxy passes the client request over
  the network, handling all of the nasty details of working with the network.
##---------------------------------------------------------------------------------------------------------------
Virtual proxy:
These proxies will provide some default and instant results if the real object is supposed to take some time
to produce results. These proxies initiate the operation on real objects and provide a default result
to the application. Once the real object is done, these proxies push the actual data to the client where
it has provided dummy data earlier.

Lazy initialization (virtual proxy). This is when you have a heavyweight service object that wastes system resources
by being always up, even though you only need it from time to time.
->Instead of creating the object when the app launches, you can delay the object’s initialization to a time
   when it’s really needed.

##---------------------------------------------------------------------------------------------------------------
Protection proxy:
If an application does not have access to some resource then such proxies will talk to the objects
in applications that have access to that resource and then get the result back.

- Access control (protection proxy). This is when you want only specific clients to be able to
use the service object; for instance, when your objects are crucial parts of an operating system and
clients are various launched applications (including malicious ones).
The proxy can pass the request to the service object only if the client’s credentials match some criteria.

##---------------------------------------------------------------------------------------------------------------
Smart Proxy:

A smart proxy provides additional layer of security by interposing specific actions when
the object is accessed. An example can be to check if the real object is locked before it is accessed
to ensure that no other object can change it.


##-----------------------------------------------------------------------------------------------------------------
Logging proxy

Logging requests (logging proxy). This is when you want to keep a history of requests to the service object.
The proxy can log each request before passing it to the service.

##-----------------------------------------------------------------------------------------------------------------
Caching proxy

 Caching request results (caching proxy). This is when you need to cache results of client requests
 and manage the life cycle of this cache, especially if results are quite large.

 The proxy can implement caching for recurring requests that always yield the same results.
  The proxy may use the parameters of requests as the cache keys.
##-----------------------------------------------------------------------------------------------------------------

Smart reference. This is when you need to be able to dismiss a heavyweight object once there are no clients that
 use it.

 The proxy can keep track of clients that obtained a reference to the service object or its results.
  From time to time,
 the proxy may go over the clients and check whether they are still active. If the client list gets empty,
 the proxy might dismiss the service object and free the underlying system resources.

The proxy can also track whether the client had modified the service object. Then the unchanged objects
may be reused by other clients.